/*
 * Copyright (c) 2023 Sebastian Bedin <sebabedin@gmail.com>.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 *
 * @file   : driver.c
 * @date   : Feb 17, 2023
 * @author : Sebastian Bedin <sebabedin@gmail.com>
 * @version	v1.0.0
 */

/********************** inclusions *******************************************/

#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>

#include "hal.h"
#include "driver.h"
#include "driver_uart_port.h"

/********************** macros and definitions *******************************/

#define TX_TIMEOUT_         (100)
#define RX_TIMEOUT_         (100)

/********************** internal data declaration ****************************/
/********************** internal functions declaration ***********************/
/********************** internal data definition *****************************/
/********************** external data definition *****************************/
/********************** internal functions definition ************************/
/********************** external functions definition ************************/

void driver_init(manejador_UART_t *p_uart_a_utilizar) {
	// Mutex para garantizar que no hay interferencia entre tareas.
	// No parece ser absolutamente necesario pero es una garantía más.
	p_uart_a_utilizar->mutex = xSemaphoreCreateMutex();
	if (p_uart_a_utilizar->mutex == NULL) {
		while (true) {
			// Hubo un error inesterado: Me quedo acá. :-(
		};
	}
}

size_t driver_uart_rx(manejador_UART_t *UART, uint8_t *buffer, size_t size) {
	// Debo poder saber cuántos caracteres recibí realmente.
	// Para eso debo leer de a 1 byte e ir contando.
	size_t estado_rx = 0;
	size_t contador_rx = 0;
	uint8_t byte_rx;

	// Loop de rx hasta alcanzar:
	// 1) cantidad size de caracteres recibidos
	// 2) o timeout
	do {
		if (1
				== (estado_rx = driver_uart_port_hal_rx(UART->p_UART, &byte_rx,
						RX_TIMEOUT_))) {
			buffer[contador_rx] = byte_rx;
			contador_rx++;
		}
	} while (estado_rx == 1 && contador_rx < size);

	// Devuelve los caracteres recibidos (0 si pasó el timeout)
	// y los almacenó en buffer.
	return contador_rx;
}

size_t driver_uart_tx(manejador_UART_t *p_uart, uint8_t *buffer, size_t size) {
	xSemaphoreTake(p_uart->mutex, portMAX_DELAY);			// MUTEX preventivo
	driver_uart_port_hal_tx(p_uart->p_UART, buffer, size, TX_TIMEOUT_);
	// Transmisión :-)
	xSemaphoreGive(p_uart->mutex);							// Libero MUTEX
	return size;
}

/********************** end of file ******************************************/

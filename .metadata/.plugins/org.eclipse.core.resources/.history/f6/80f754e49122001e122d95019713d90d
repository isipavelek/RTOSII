/*
 * Copyright (c) 2023 Sebastian Bedin <sebabedin@gmail.com>.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 *
 * @file   : app.c
 * @date   : Feb 17, 2023
 * @author : Sebastian Bedin <sebabedin@gmail.com>
 * @version	v1.0.0
 */

/********************** inclusions *******************************************/

#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>

#include "driver.h"
#include "test.h"
#include "test_mock.h"

/********************** macros and definitions *******************************/
#define TIME_ACCESS 10
#define QUEUE_LENGTH_            (10)
#define QUEUE_ITEM_SIZE_         (sizeof(uint8_t))

/********************** internal data declaration ****************************/
QueueHandle_t queue;

/********************** internal functions declaration ***********************/

/********************** internal data definition *****************************/
typedef enum {
	TUNNEL_FREE,
	TUNNEL_BUSY
}tunnel_t;

typedef struct {
	bool state;

}tunnel_t;

/********************** external data definition *****************************/

/********************** internal functions definition ************************/

/********************** external functions definition ************************/

    /*ACCESS_EAST = 0,
    ACCESS_WEST,
    ACCESS__CNT,*/
bool car_sensor_read(access_t access);
void access_open(access_t access);
void access_close(access_t access);

static void task_access_(void *argument) {

	while(1){


	}
}
static void ao_access_ (access_t access){
	return car_sensor_read(access);


}
static void ao_sensor_process(){

}


static void task_ao_access(void *argument) {
	access_t access = (access_t) argument;
	while(1){

		ao_sensor_process(access);
		ao_access_(access_t);

	}
}


static void ao_access_init (void){
	access_close(ACCESS_EAST);
	access_close(ACCESS_WEST);
	queue = xQueueCreate(QUEUE_LENGTH_, QUEUE_ITEM_SIZE_);
	while (NULL == queue){
	// error
	}
	BaseType_t status;
	status = xTaskCreate(task_ao_access, "task_access_oa", 128, NULL, tskIDLE_PRIORITY + 1, NULL);
	while (pdPASS != status)
	{
	ELOG("Error!!!");
	// error
	}

}


void app_init(void)
{
  // drivers
  {
    driver_init();
    ELOG("drivers init");
  }

  // test
  {
    test_init();
    ELOG("test init");
  }

  // OA
  {
	  ao_access_init();
    ELOG("ao init");
  }

  // tasks
  {

	  BaseType_t status;
	  status = xTaskCreate(task_access_, "task_access_west", 128, NULL, tskIDLE_PRIORITY + 1, NULL);
	  while (pdPASS != status)
	  {
		ELOG("Error!!!");
		// error
	  }
	  status = xTaskCreate(task_access_, "task_access_est", 128, NULL, tskIDLE_PRIORITY + 1, NULL);
	  while (pdPASS != status)
	  {
		ELOG("Error!!!");
		// error
	  }



    ELOG("tasks init");
  }

  ELOG("app init");
}

/********************** end of file ******************************************/
